#!/usr/bin/env julia

using Test
using DelimitedFiles

include("./src/Potential.jl")

"Run some basic tests"

cost_mat = readdlm("data/london_n/cost_mat.txt")
cost_adj = convert(Array, cost_mat')
orig = readdlm("data/london_n/P.txt")

N, M = size(cost_mat)

xval = [0.35783767264345334, -0.2209858163853502, 0.07694316282590163, -0.5592493820167688,
0.45017948071235336, -0.13187935288390085, 0.08173972881194702, 0.4697604252725478, -0.7930020302715701,
 0.636736964081372, 0.04159245658542776, -0.5011748638445761, -0.5322225987871061, -0.766410957379569,
 0.958442692383763, 0.626177847931769, 0.610182863131767, 0.24255338002914106, -0.3249586529212869,
  0.8402797620935014, 0.9584105409783232, 0.3838693989980384, 0.2554425489860863, 0.009636452399528928,
  0.8633302667076528, 0.4971420481429969, 0.7620931640627635, -0.6214045967132642, 0.6885390087081147,
   -0.8332058405202001, -0.8445006788282816, 0.058018387092042545, 0.7448517737345446, -0.1102485355047067,
   0.6091525003404037, 0.4703273849893166, -0.3186939596967906, -0.6148175125420252, -0.6271015543044971,
    0.7662334229195285, 0.40033467437582004, -0.49266705127946153, 0.3845870729035221, 0.3956082166537964,
    0.9261066681673142, 0.054700333751995345, 0.16057794939771997, -0.23830634738546452, 0.6484556249254738]

# default theta in 'urban_model.py'
theta = [1., 0., .3/M, 100., 1.3]

@testset "Testing Potential function" begin
    val, grad = Potential.potential(xval, orig, cost_mat, theta, N, M)
    @test isapprox(val, 7974.8418189810845 , rtol=1e-10)
    @test isapprox(grad, [183.10355421301847, 102.3710206326355, 138.11302248813254, 72.81557920939032, 200.87615309912601, 111.96875570837233, 138.78002577089683, 204.86036627928482, 57.5101062119767, 242.20019302894366, 133.29465444069632, 77.20612007724174, 74.82715790070577, 59.07637396772355, 334.3423594461358, 239.6497969548019, 235.83738030079525, 163.09924994509683, 92.20140031513311, 297.01209381721, 334.33159035796996, 187.94878487035083, 165.22301242729185, 129.08317442738402, 303.95216378366285, 210.56427458932308, 274.62831674826003, 68.39059930808655, 255.10986061918862, 55.21971594168019, 54.59265093687786, 135.51236397156092, 269.92346245409794, 114.43050359704472, 235.5938768749355, 204.97689400286237, 92.7846744385495, 68.84662714890536, 67.99861066249147, 275.77024623196513, 191.0791949608545, 77.8710085030867, 188.08415877235475, 190.1753112414651, 323.6845042354139, 135.06144376079402, 150.2142702839301, 100.6026545186175, 245.062367308154], rtol=1e-10)

    # test modifying the gradient
    grad = Array{Float64,1}(undef, M)
    val, _ = Potential.potential!(grad, xval, orig, cost_adj, theta, N, M)
    @test isapprox(val, 7974.8418189810845 , rtol=1e-10)
    @test isapprox(grad, [183.10355421301847, 102.3710206326355, 138.11302248813254, 72.81557920939032, 200.87615309912601, 111.96875570837233, 138.78002577089683, 204.86036627928482, 57.5101062119767, 242.20019302894366, 133.29465444069632, 77.20612007724174, 74.82715790070577, 59.07637396772355, 334.3423594461358, 239.6497969548019, 235.83738030079525, 163.09924994509683, 92.20140031513311, 297.01209381721, 334.33159035796996, 187.94878487035083, 165.22301242729185, 129.08317442738402, 303.95216378366285, 210.56427458932308, 274.62831674826003, 68.39059930808655, 255.10986061918862, 55.21971594168019, 54.59265093687786, 135.51236397156092, 269.92346245409794, 114.43050359704472, 235.5938768749355, 204.97689400286237, 92.7846744385495, 68.84662714890536, 67.99861066249147, 275.77024623196513, 191.0791949608545, 77.8710085030867, 188.08415877235475, 190.1753112414651, 323.6845042354139, 135.06144376079402, 150.2142702839301, 100.6026545186175, 245.062367308154], rtol=1e-10)

    # test returning the gradient at the end
    grad = Array{Float64,1}(undef, M)
    val, grad = Potential.potential!(grad, xval, orig, cost_adj, theta, N, M)
    @test isapprox(val, 7974.8418189810845 , rtol=1e-10)
    @test isapprox(grad, [183.10355421301847, 102.3710206326355, 138.11302248813254, 72.81557920939032, 200.87615309912601, 111.96875570837233, 138.78002577089683, 204.86036627928482, 57.5101062119767, 242.20019302894366, 133.29465444069632, 77.20612007724174, 74.82715790070577, 59.07637396772355, 334.3423594461358, 239.6497969548019, 235.83738030079525, 163.09924994509683, 92.20140031513311, 297.01209381721, 334.33159035796996, 187.94878487035083, 165.22301242729185, 129.08317442738402, 303.95216378366285, 210.56427458932308, 274.62831674826003, 68.39059930808655, 255.10986061918862, 55.21971594168019, 54.59265093687786, 135.51236397156092, 269.92346245409794, 114.43050359704472, 235.5938768749355, 204.97689400286237, 92.7846744385495, 68.84662714890536, 67.99861066249147, 275.77024623196513, 191.0791949608545, 77.8710085030867, 188.08415877235475, 190.1753112414651, 323.6845042354139, 135.06144376079402, 150.2142702839301, 100.6026545186175, 245.062367308154], rtol=1e-10)

    val2 = Potential.potential_val(xval, orig, cost_adj, theta, N, M)
    @test isapprox(val2, 7974.8418189810845 , rtol=1e-10)

    # test modifying the gradient
    grad2 = Array{Float64,1}(undef, M)
    Potential.potential_grad!(grad2, xval, orig, cost_adj, theta, N, M)
    @test isapprox(grad2, [183.10355421301847, 102.3710206326355, 138.11302248813254, 72.81557920939032, 200.87615309912601, 111.96875570837233, 138.78002577089683, 204.86036627928482, 57.5101062119767, 242.20019302894366, 133.29465444069632, 77.20612007724174, 74.82715790070577, 59.07637396772355, 334.3423594461358, 239.6497969548019, 235.83738030079525, 163.09924994509683, 92.20140031513311, 297.01209381721, 334.33159035796996, 187.94878487035083, 165.22301242729185, 129.08317442738402, 303.95216378366285, 210.56427458932308, 274.62831674826003, 68.39059930808655, 255.10986061918862, 55.21971594168019, 54.59265093687786, 135.51236397156092, 269.92346245409794, 114.43050359704472, 235.5938768749355, 204.97689400286237, 92.7846744385495, 68.84662714890536, 67.99861066249147, 275.77024623196513, 191.0791949608545, 77.8710085030867, 188.08415877235475, 190.1753112414651, 323.6845042354139, 135.06144376079402, 150.2142702839301, 100.6026545186175, 245.062367308154], rtol=1e-10)

    # test returning the gradient
    grad2 = Array{Float64,1}(undef, M)
    grad2 = Potential.potential_grad!(grad2, xval, orig, cost_adj, theta, N, M)
    @test isapprox(grad2, [183.10355421301847, 102.3710206326355, 138.11302248813254, 72.81557920939032, 200.87615309912601, 111.96875570837233, 138.78002577089683, 204.86036627928482, 57.5101062119767, 242.20019302894366, 133.29465444069632, 77.20612007724174, 74.82715790070577, 59.07637396772355, 334.3423594461358, 239.6497969548019, 235.83738030079525, 163.09924994509683, 92.20140031513311, 297.01209381721, 334.33159035796996, 187.94878487035083, 165.22301242729185, 129.08317442738402, 303.95216378366285, 210.56427458932308, 274.62831674826003, 68.39059930808655, 255.10986061918862, 55.21971594168019, 54.59265093687786, 135.51236397156092, 269.92346245409794, 114.43050359704472, 235.5938768749355, 204.97689400286237, 92.7846744385495, 68.84662714890536, 67.99861066249147, 275.77024623196513, 191.0791949608545, 77.8710085030867, 188.08415877235475, 190.1753112414651, 323.6845042354139, 135.06144376079402, 150.2142702839301, 100.6026545186175, 245.062367308154], rtol=1e-10)
end

@testset "Testing Hessian function" begin
    true_hess = readdlm("data/hessian_test.txt")
    hess = Potential.hessian(xval, orig, cost_mat, theta, N, M)
    @test isapprox(true_hess, hess, rtol=1e-10)
end
